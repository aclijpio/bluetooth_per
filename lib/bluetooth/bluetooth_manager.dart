import 'dart:async';

import 'package:dartz/dartz.dart';
import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;

import '../core/error/failures.dart';
import 'entities/main_data.dart';
import 'config/device_config.dart';
import 'entities/archive_info.dart';
import 'entities/bluetooth_device.dart';
import 'entities/point.dart';
import 'repositories/bluetooth_server_repository.dart';
import 'services/web_integration_service.dart';
import 'transport/bluetooth_transport.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Bluetooth –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
class BluetoothManager {
  final BluetoothTransport _transport;
  final BluetoothServerRepository _bluetoothRepository;
  final WebIntegrationService _webService;

  BluetoothManager({
    required classic.FlutterBlueClassic flutterBlueClassic,
    required MainData mainData,
  })  : _transport = BluetoothTransport(flutterBlueClassic),
        _bluetoothRepository = BluetoothServerRepository(
            flutterBlueClassic, BluetoothTransport(flutterBlueClassic)),
        _webService = WebIntegrationService(mainData);

  /// –ü–æ–ª–Ω—ã–π flow —Ä–∞–±–æ—Ç—ã —Å Bluetooth —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<Either<Failure, List<Point>>> executeFullFlow() async {
    try {
      print(
          'üöÄ [BluetoothManager] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π flow —Ä–∞–±–æ—Ç—ã —Å Bluetooth —Å–µ—Ä–≤–µ—Ä–æ–º');

      // 1. –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      print('üîç [BluetoothManager] –®–∞–≥ 1: –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
      final scanResult = await _bluetoothRepository.scanForDevices();
      if (scanResult.isLeft()) {
        final failure =
            scanResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print(
            '‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${failure.message}');
        return Left(failure);
      }

      final devices =
          scanResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('üìä [BluetoothManager] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}');

      if (devices.isEmpty) {
        final error =
            'No devices found matching patterns: ${DeviceConfig.getPatterns()}';
        print('‚ùå [BluetoothManager] $error');
        return Left(BluetoothFailure(message: error));
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      final device = devices.first;
      print(
          '‚úÖ [BluetoothManager] –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.name} (${device.address})');

      // 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
      print(
          'üîó [BluetoothManager] –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞');
      final connectResult =
          await _bluetoothRepository.connectAndUpdateArchive(device);
      if (connectResult.isLeft()) {
        final failure =
            connectResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print('‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${failure.message}');
        return Left(failure);
      }

      final archiveInfo =
          connectResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('‚úÖ [BluetoothManager] –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤: ${archiveInfo.fileName}');

      // 3. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
      print('üì• [BluetoothManager] –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞');
      final downloadResult =
          await _bluetoothRepository.downloadArchive(archiveInfo);
      if (downloadResult.isLeft()) {
        final failure =
            downloadResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print(
            '‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ${failure.message}');
        return Left(failure);
      }

      final extractedPath =
          downloadResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('‚úÖ [BluetoothManager] –ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤: $extractedPath');

      // 4. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞
      print('üìÇ [BluetoothManager] –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞');
      final loadResult =
          await _webService.loadOperationsFromArchive(extractedPath);
      if (loadResult != OperStatus.ok) {
        final error = 'Failed to load operations: $loadResult';
        print('‚ùå [BluetoothManager] $error');
        return Left(FileOperationFailure(message: error));
      }

      final operations = _webService.getOperations();
      print('üìä [BluetoothManager] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}');

      if (operations.isEmpty) {
        final error = 'No operations found in archive';
        print('‚ùå [BluetoothManager] $error');
        return Left(FileOperationFailure(message: error));
      }

      // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      print('üîÑ [BluetoothManager] –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
      final allDifferentPoints = <Point>[];

      for (int i = 0; i < operations.length; i++) {
        final operation = operations[i];
        print(
            'üìã [BluetoothManager] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${i + 1}/${operations.length}: ${operation.dt}');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        final pointsResult = await _webService.loadOperationPoints(operation);
        if (pointsResult != OperStatus.ok) {
          print(
              '‚ö†Ô∏è [BluetoothManager] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.dt}: $pointsResult');
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
        final differentPoints = _webService.getDifferentPoints(operation);
        allDifferentPoints.addAll(differentPoints);

        print(
            '‚úÖ [BluetoothManager] –û–ø–µ—Ä–∞—Ü–∏—è ${operation.dt}: –Ω–∞–π–¥–µ–Ω–æ ${differentPoints.length} –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫');
      }

      // 6. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      print('üîå [BluetoothManager] –®–∞–≥ 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      await _bluetoothRepository.disconnect();
      print('‚úÖ [BluetoothManager] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');

      // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (allDifferentPoints.isNotEmpty) {
        print(
            'üì§ [BluetoothManager] –®–∞–≥ 7: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (${allDifferentPoints.length} —Ç–æ—á–µ–∫)');
        final sendResult =
            await _webService.sendDifferentPoints(allDifferentPoints);
        if (sendResult != 200) {
          print(
              '‚ö†Ô∏è [BluetoothManager] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $sendResult');
        } else {
          print(
              '‚úÖ [BluetoothManager] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${allDifferentPoints.length} —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        }
      } else {
        print('‚ÑπÔ∏è [BluetoothManager] –ù–µ—Ç –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }

      print('üéâ [BluetoothManager] –ü–æ–ª–Ω—ã–π flow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return Right(allDifferentPoints);
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º flow: $e');
      return Left(BluetoothFailure(message: e.toString()));
    } finally {
      print('üßπ [BluetoothManager] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      await _bluetoothRepository.disconnect();
      _webService.resetOperationData();
      print('‚úÖ [BluetoothManager] –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
  }

  /// –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<Either<Failure, List<BluetoothDevice>>> scanForDevices() async {
    return await _bluetoothRepository.scanForDevices();
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, ArchiveInfo>> connectAndUpdateArchive(
      BluetoothDevice device) async {
    return await _bluetoothRepository.connectAndUpdateArchive(device);
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, String>> downloadArchive(
      ArchiveInfo archiveInfo) async {
    return await _bluetoothRepository.downloadArchive(archiveInfo);
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<Either<Failure, bool>> disconnect() async {
    return await _bluetoothRepository.disconnect();
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    await _transport.dispose();
  }
}
