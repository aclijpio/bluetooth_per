import 'dart:async';

import 'package:dartz/dartz.dart';
import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;

import '../core/error/failures.dart';
import 'entities/main_data.dart';
import 'config/device_config.dart';
import 'entities/archive_info.dart';
import 'entities/bluetooth_device.dart';
import 'entities/point.dart';
import 'entities/operation.dart';
import 'repositories/bluetooth_server_repository.dart';
import 'services/web_integration_service.dart';
import 'transport/bluetooth_transport.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Bluetooth –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
/// –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç—ã
class BluetoothManager {
  final BluetoothTransport _transport;
  final BluetoothServerRepository _bluetoothRepository;
  final WebIntegrationService _webService;

  BluetoothManager({
    required classic.FlutterBlueClassic flutterBlueClassic,
    required MainData mainData,
  })  : _transport = BluetoothTransport(flutterBlueClassic),
        _bluetoothRepository = BluetoothServerRepository(
            flutterBlueClassic, BluetoothTransport(flutterBlueClassic)),
        _webService = WebIntegrationService(mainData);

  /// –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<Either<Failure, List<BluetoothDevice>>> scanForDevices() async {
    try {
      print('üîç [BluetoothManager] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      final result = await _bluetoothRepository.scanForDevices();

      result.fold(
        (failure) {
          print(
              '‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${failure.message}');
        },
        (devices) {
          print('üìä [BluetoothManager] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}');
          if (devices.isNotEmpty) {
            for (final device in devices) {
              print('‚úÖ [BluetoothManager] ${device.name} (${device.address})');
            }
          } else {
            print('‚ö†Ô∏è [BluetoothManager] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
        },
      );

      return result;
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      return Left(BluetoothFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e'));
    }
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, ArchiveInfo>> connectAndUpdateArchive(
      BluetoothDevice device) async {
    try {
      print(
          'üîó [BluetoothManager] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${device.name} (${device.address})');
      final result = await _bluetoothRepository.connectAndUpdateArchive(device);

      result.fold(
        (failure) {
          print('‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${failure.message}');
        },
        (archiveInfo) {
          print('‚úÖ [BluetoothManager] –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤: ${archiveInfo.fileName}');
        },
      );

      return result;
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e'));
    }
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, String>> downloadArchive(
      ArchiveInfo archiveInfo) async {
    try {
      print('üì• [BluetoothManager] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: ${archiveInfo.fileName}');
      final result = await _bluetoothRepository.downloadArchive(archiveInfo);

      result.fold(
        (failure) {
          print('‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${failure.message}');
        },
        (extractedPath) {
          print('‚úÖ [BluetoothManager] –ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤: $extractedPath');
        },
      );

      return result;
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: $e');
      return Left(
          FileOperationFailure(message: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: $e'));
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, List<Operation>>> loadOperationsFromArchive(
      String archivePath) async {
    try {
      print('üìÇ [BluetoothManager] –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞: $archivePath');

      final loadResult =
          await _webService.loadOperationsFromArchive(archivePath);
      if (loadResult != OperStatus.ok) {
        final error = 'Failed to load operations: $loadResult';
        print('‚ùå [BluetoothManager] $error');
        return Left(FileOperationFailure(message: error));
      }

      final operations = _webService.getOperations();
      print('üìä [BluetoothManager] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}');

      if (operations.isEmpty) {
        final error = 'No operations found in archive';
        print('‚ùå [BluetoothManager] $error');
        return Left(FileOperationFailure(message: error));
      }

      return Right(operations);
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π: $e');
      return Left(
          FileOperationFailure(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: $e'));
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫
  Future<Either<Failure, List<Point>>> processOperations(
      List<Operation> operations) async {
    try {
      print(
          'üîÑ [BluetoothManager] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π)');
      final allDifferentPoints = <Point>[];

      for (int i = 0; i < operations.length; i++) {
        final operation = operations[i];
        print(
            'üìã [BluetoothManager] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${i + 1}/${operations.length}: ${operation.dt}');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        final pointsResult = await _webService.loadOperationPoints(operation);
        if (pointsResult != OperStatus.ok) {
          print(
              '‚ö†Ô∏è [BluetoothManager] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.dt}: $pointsResult');
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
        final differentPoints = _webService.getDifferentPoints(operation);
        allDifferentPoints.addAll(differentPoints);

        print(
            '‚úÖ [BluetoothManager] –û–ø–µ—Ä–∞—Ü–∏—è ${operation.dt}: –Ω–∞–π–¥–µ–Ω–æ ${differentPoints.length} –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫');
      }

      print(
          'üìä [BluetoothManager] –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫: ${allDifferentPoints.length}');
      return Right(allDifferentPoints);
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π: $e');
      return Left(
          FileOperationFailure(message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: $e'));
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<Either<Failure, int>> sendPointsToServer(List<Point> points) async {
    try {
      if (points.isEmpty) {
        print('‚ÑπÔ∏è [BluetoothManager] –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return const Right(200);
      }

      print(
          'üì§ [BluetoothManager] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (${points.length} —Ç–æ—á–µ–∫)');
      final sendResult = await _webService.sendDifferentPoints(points);

      if (sendResult != 200) {
        print(
            '‚ö†Ô∏è [BluetoothManager] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $sendResult');
        return Left(ConnectionFailure(
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $sendResult'));
      } else {
        print(
            '‚úÖ [BluetoothManager] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        return Right(sendResult);
      }
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ—á–µ–∫: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—á–µ–∫: $e'));
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<Either<Failure, bool>> disconnect() async {
    try {
      print('üîå [BluetoothManager] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      final result = await _bluetoothRepository.disconnect();

      result.fold(
        (failure) {
          print('‚ùå [BluetoothManager] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${failure.message}');
        },
        (success) {
          print('‚úÖ [BluetoothManager] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        },
      );

      return result;
    } catch (e) {
      print('‚ùå [BluetoothManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: $e'));
    }
  }

  /// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  void resetOperationData() {
    print('üßπ [BluetoothManager] –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    _webService.resetOperationData();
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    print('üßπ [BluetoothManager] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤');
    await _transport.dispose();
    resetOperationData();
    print('‚úÖ [BluetoothManager] –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}
