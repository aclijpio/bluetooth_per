import 'dart:async';
import 'dart:typed_data';

import 'package:dartz/dartz.dart';
import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;

import '../core/error/failures.dart';
import 'entities/main_data.dart';
import 'entities/archive_info.dart';
import 'entities/bluetooth_device.dart';
import 'entities/point.dart';
import 'entities/operation.dart';
import 'config/device_config.dart';
import 'transport/bluetooth_transport.dart';
import 'services/archive_service.dart';
import 'services/web_integration_service.dart';
import 'protocol/bluetooth_protocol.dart';

/// –ü–æ–ª–Ω—ã–π workflow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
/// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ—Ç –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
class BluetoothWorkflow {
  final classic.FlutterBlueClassic _flutterBlueClassic;
  final BluetoothTransport _transport;
  final WebIntegrationService _webService;
  final MainData _mainData;

  /// –ê–¥—Ä–µ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äì –Ω—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è,
  /// –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É ARCHIVE_READY –∏ GET_ARCHIVE.
  String? _lastConnectedAddress;

  BluetoothWorkflow({
    required classic.FlutterBlueClassic flutterBlueClassic,
    required MainData mainData,
  })  : _flutterBlueClassic = flutterBlueClassic,
        _transport = BluetoothTransport(flutterBlueClassic),
        _mainData = mainData,
        _webService = WebIntegrationService(mainData);

  /// –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<Either<Failure, List<Point>>> executeFullWorkflow() async {
    try {
      print('üöÄ [BluetoothWorkflow] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π workflow...');

      // –®–∞–≥ 1: –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      print('üîç [BluetoothWorkflow] –®–∞–≥ 1: –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
      final scanResult = await _scanForDevices();
      if (scanResult.isLeft()) {
        final failure =
            scanResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print(
            '‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${failure.message}');
        return Left(failure);
      }

      final devices =
          scanResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('üìä [BluetoothWorkflow] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}');

      if (devices.isEmpty) {
        final error =
            'No devices found matching patterns: ${DeviceConfig.getPatterns()}';
        print('‚ùå [BluetoothWorkflow] $error');
        return Left(BluetoothFailure(message: error));
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      final device = devices.first;
      print(
          '‚úÖ [BluetoothWorkflow] –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.name} (${device.address})');

      // –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
      print(
          'üîó [BluetoothWorkflow] –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞');
      final connectResult = await _connectAndUpdateArchive(device);
      if (connectResult.isLeft()) {
        final failure =
            connectResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${failure.message}');
        return Left(failure);
      }

      final archiveInfo =
          connectResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('‚úÖ [BluetoothWorkflow] –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤: ${archiveInfo.fileName}');

      // –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
      print('üì• [BluetoothWorkflow] –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞');
      final downloadResult = await _downloadArchive(archiveInfo);
      if (downloadResult.isLeft()) {
        final failure =
            downloadResult.fold((l) => l, (r) => throw Exception('Unexpected'));
        print(
            '‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ${failure.message}');
        return Left(failure);
      }

      final extractedPath =
          downloadResult.fold((l) => throw Exception('Unexpected'), (r) => r);
      print('‚úÖ [BluetoothWorkflow] –ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤: $extractedPath');

      // –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞
      print('üìÇ [BluetoothWorkflow] –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞');
      final loadResult =
          await _webService.loadOperationsFromArchive(extractedPath);
      if (loadResult != OperStatus.ok) {
        final error = 'Failed to load operations: $loadResult';
        print('‚ùå [BluetoothWorkflow] $error');
        return Left(FileOperationFailure(message: error));
      }

      final operations = _webService.getOperations();
      print('üìä [BluetoothWorkflow] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}');

      if (operations.isEmpty) {
        final error = 'No operations found in archive';
        print('‚ùå [BluetoothWorkflow] $error');
        return Left(FileOperationFailure(message: error));
      }

      // –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      print('üîÑ [BluetoothWorkflow] –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
      final allDifferentPoints = <Point>[];

      for (int i = 0; i < operations.length; i++) {
        final operation = operations[i];
        print(
            'üìã [BluetoothWorkflow] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${i + 1}/${operations.length}: ${operation.dt}');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        final pointsResult = await _webService.loadOperationPoints(operation);
        if (pointsResult != OperStatus.ok) {
          print(
              '‚ö†Ô∏è [BluetoothWorkflow] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.dt}: $pointsResult');
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
        final differentPoints = _webService.getDifferentPoints(operation);
        allDifferentPoints.addAll(differentPoints);

        print(
            '‚úÖ [BluetoothWorkflow] –û–ø–µ—Ä–∞—Ü–∏—è ${operation.dt}: –Ω–∞–π–¥–µ–Ω–æ ${differentPoints.length} –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫');
      }

      // –®–∞–≥ 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      print('üîå [BluetoothWorkflow] –®–∞–≥ 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      await _disconnect();
      print('‚úÖ [BluetoothWorkflow] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');

      // –®–∞–≥ 7: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (allDifferentPoints.isNotEmpty) {
        print(
            'üì§ [BluetoothWorkflow] –®–∞–≥ 7: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (${allDifferentPoints.length} —Ç–æ—á–µ–∫)');
        final sendResult =
            await _webService.sendDifferentPoints(allDifferentPoints);
        if (sendResult != 200) {
          print(
              '‚ö†Ô∏è [BluetoothWorkflow] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $sendResult');
        } else {
          print(
              '‚úÖ [BluetoothWorkflow] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${allDifferentPoints.length} —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        }
      } else {
        print('‚ÑπÔ∏è [BluetoothWorkflow] –ù–µ—Ç –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }

      print('üéâ [BluetoothWorkflow] –ü–æ–ª–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return Right(allDifferentPoints);
    } catch (e) {
      print('‚ùå [BluetoothWorkflow] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º workflow: $e');
      return Left(BluetoothFailure(message: e.toString()));
    } finally {
      print('üßπ [BluetoothWorkflow] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
      await _disconnect();
      _webService.resetOperationData();
      print('‚úÖ [BluetoothWorkflow] –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
  }

  /// –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<Either<Failure, List<BluetoothDevice>>> _scanForDevices() async {
    try {
      print('üîç [BluetoothWorkflow] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      final completer = Completer<List<BluetoothDevice>>();
      final devices = <BluetoothDevice>[];
      final seenDevices = <String>{};

      final subscription = _flutterBlueClassic.scanResults.listen(
        (classicDevice) {
          print(
              'üì° [BluetoothWorkflow] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${classicDevice.name} (${classicDevice.address})');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
          if (seenDevices.contains(classicDevice.address)) {
            return;
          }
          seenDevices.add(classicDevice.address);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
          if (classicDevice.name != null &&
              classicDevice.name != "null" &&
              DeviceConfig.matchesPattern(classicDevice.name)) {
            print(
                '‚úÖ [BluetoothWorkflow] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${classicDevice.name}');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if (!devices.any((d) => d.address == classicDevice.address)) {
              final device = BluetoothDevice(
                address: classicDevice.address,
                name: classicDevice.name,
              );
              devices.add(device);
              print(
                  '‚ûï [BluetoothWorkflow] –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.name} (${device.address})');
            }
          }
        },
        onError: (error) {
          print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: $error');
          completer.completeError(error);
        },
        onDone: () {
          print('üîç [BluetoothWorkflow] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        },
      );

      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      print('üîç [BluetoothWorkflow] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...');
      _flutterBlueClassic.startScan();

      // –°–∫–∞–Ω–∏—Ä—É–µ–º 60 —Å–µ–∫—É–Ω–¥
      Timer(const Duration(seconds: 60), () {
        print('‚è∞ [BluetoothWorkflow] –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥)');
        _flutterBlueClassic.stopScan();
        subscription.cancel();

        print('üìä [BluetoothWorkflow] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
        print('   - –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${seenDevices.length}');
        print('   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${devices.length}');

        if (devices.isNotEmpty) {
          for (final device in devices) {
            print('   ‚úÖ ${device.name} (${device.address})');
          }
        } else {
          print('   ‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∏–º–µ–Ω–µ–º "Quantor" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        completer.complete(devices);
      });

      final result = await completer.future;
      print('‚úÖ [BluetoothWorkflow] –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return Right(result);
    } catch (e) {
      print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      return Left(BluetoothFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e'));
    }
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, ArchiveInfo>> _connectAndUpdateArchive(
      BluetoothDevice device) async {
    try {
      print(
          'üîó [BluetoothWorkflow] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${device.name} (${device.address})');

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
      await _transport.connect(device.address);
      _lastConnectedAddress = device.address;
      print('‚úÖ [BluetoothWorkflow] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
      final updateCommand = BluetoothProtocol.updateArchiveCmd();
      print('üì§ [BluetoothWorkflow] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É UPDATE_ARCHIVE');
      _transport.sendCommand(updateCommand);
      print('‚úÖ [BluetoothWorkflow] –ö–æ–º–∞–Ω–¥–∞ UPDATE_ARCHIVE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');

      // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –∞—Ä—Ö–∏–≤ –∏ –ø—Ä–∏—à–ª—ë—Ç ARCHIVE_READY
      print('‚è≥ [BluetoothWorkflow] –û–∂–∏–¥–∞–µ–º ARCHIVE_READY –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
      final archiveInfo = await _waitForArchiveReady();
      print(
          '‚úÖ [BluetoothWorkflow] ARCHIVE_READY –ø–æ–ª—É—á–µ–Ω: ${archiveInfo.fileName}');

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è.
      if (!_transport.isConnected) {
        print(
            'üîÑ [BluetoothWorkflow] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø–µ—Ä–µ–¥ GET_ARCHIVE ‚Äì –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
        await _transport.connect(_lastConnectedAddress!);
        print('‚úÖ [BluetoothWorkflow] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET_ARCHIVE (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –∏–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
      final getArchiveCmd = BluetoothProtocol.getArchiveCmd(archiveInfo.path);
      print('üì§ [BluetoothWorkflow] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET_ARCHIVE');
      _transport.sendCommand(getArchiveCmd);
      print('‚úÖ [BluetoothWorkflow] GET_ARCHIVE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

      return Right(archiveInfo);
    } catch (e) {
      print(
          '‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e'));
    }
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, String>> _downloadArchive(
      ArchiveInfo archiveInfo) async {
    try {
      print(
          'üì• [BluetoothWorkflow] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: ${archiveInfo.fileName}');

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É GET_ARCHIVE.
      bool resentGetArchive = false;
      if (!_transport.isConnected) {
        if (_lastConnectedAddress == null) {
          throw StateError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫ –∫–∞–∫–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è');
        }

        print(
            'üîÑ [BluetoothWorkflow] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ $_lastConnectedAddress');
        await _transport.connect(_lastConnectedAddress!);
        print('‚úÖ [BluetoothWorkflow] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');

        final getArchiveCmd = BluetoothProtocol.getArchiveCmd(archiveInfo.path);
        print('üì§ [BluetoothWorkflow] –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º GET_ARCHIVE');
        _transport.sendCommand(getArchiveCmd);
        resentGetArchive = true;
      }

      if (!resentGetArchive) {
        print('‚ÑπÔ∏è [BluetoothWorkflow] GET_ARCHIVE —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ');
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
      print('üì• [BluetoothWorkflow] –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞...');
      final archiveData = await _downloadArchiveData();
      print(
          '‚úÖ [BluetoothWorkflow] –î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã (${archiveData.length} –±–∞–π—Ç)');

      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
      print('üì¶ [BluetoothWorkflow] –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...');
      final extractedPath = await ArchiveService.extractArchive(
          archiveData, archiveInfo.fileName);
      print('‚úÖ [BluetoothWorkflow] –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: $extractedPath');

      return Right(extractedPath);
    } catch (e) {
      print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: $e');
      return Left(
          FileOperationFailure(message: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: $e'));
    } finally {
      await _transport.disconnect();
      _lastConnectedAddress = null;
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<void> _disconnect() async {
    try {
      print('üîå [BluetoothWorkflow] –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
      await _transport.disconnect();
      print('‚úÖ [BluetoothWorkflow] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: $e');
    }
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞
  Future<Uint8List> _downloadArchiveData() async {
    final completer = Completer<Uint8List>();
    final buffer = <int>[];

    print('üì• [BluetoothWorkflow] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞...');

    final subscription = _transport.bytes.listen(
      (data) {
        print(
            'üì® [BluetoothWorkflow] –ü–æ–ª—É—á–µ–Ω –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length} –±–∞–π—Ç');
        buffer.addAll(data);
        print(
            'üìä [BluetoothWorkflow] –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${buffer.length} –±–∞–π—Ç');
      },
      onError: (error) {
        print(
            '‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞: $error');
        completer.completeError(error);
      },
      onDone: () {
        print('‚úÖ [BluetoothWorkflow] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        if (!completer.isCompleted) {
          completer.complete(Uint8List.fromList(buffer));
        }
      },
    );

    // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    Timer(const Duration(seconds: 60), () {
      if (!completer.isCompleted) {
        print('‚è∞ [BluetoothWorkflow] –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ (60 —Å–µ–∫—É–Ω–¥)');
        print(
            'üìä [BluetoothWorkflow] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${buffer.length} –±–∞–π—Ç');
        completer.complete(Uint8List.fromList(buffer));
      }
    });

    try {
      final result = await completer.future;
      subscription.cancel();
      return result;
    } catch (e) {
      subscription.cancel();
      rethrow;
    }
  }

  /// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–∞–π—Ç–æ–≤
  String _decodeCommand(List<int> data) {
    try {
      if (data.length < 2) {
        print(
            '‚ùå [BluetoothWorkflow] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${data.length} –±–∞–π—Ç');
        return '';
      }

      final length = (data[0] << 8) | data[1];
      print('üìè [BluetoothWorkflow] –î–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã: $length –±–∞–π—Ç');

      if (data.length < 2 + length) {
        print(
            '‚ùå [BluetoothWorkflow] –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å ${2 + length}, –ø–æ–ª—É—á–µ–Ω–æ ${data.length}');
        return '';
      }

      final commandBytes = data.sublist(2, 2 + length);
      final command = String.fromCharCodes(commandBytes);
      print('üìù [BluetoothWorkflow] –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command');
      return command;
    } catch (e) {
      print('‚ùå [BluetoothWorkflow] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: $e');
      return '';
    }
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    await _transport.dispose();
  }

  // ---------------------- WAIT FOR ARCHIVE READY ----------------------
  Future<ArchiveInfo> _waitForArchiveReady() async {
    final completer = Completer<ArchiveInfo>();

    final subscription = _transport.bytes.listen(
      (data) {
        final cmd = _decodeCommand(data);
        if (cmd.startsWith(BluetoothProtocol.CMD_ARCHIVE_READY)) {
          final path = BluetoothProtocol.extractArchiveReadyPath(cmd);
          if (path != null) {
            completer.complete(ArchiveInfo.fromPath(path));
          } else {
            completer.completeError(
                Exception('Invalid ARCHIVE_READY command format'));
          }
        } else if (cmd.startsWith(BluetoothProtocol.CMD_ERROR)) {
          completer.completeError(
              Exception(BluetoothProtocol.extractErrorMessage(cmd) ?? 'error'));
        }
        // –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      },
      onError: completer.completeError,
      onDone: () {
        if (!completer.isCompleted) {
          completer.completeError(Exception('Connection closed before ready'));
        }
      },
      cancelOnError: true,
    );

    // safety timeout
    Timer(const Duration(seconds: 30), () {
      if (!completer.isCompleted) {
        completer.completeError(Exception('Timeout waiting for ARCHIVE_READY'));
      }
    });

    try {
      final result = await completer.future;
      await subscription.cancel();
      return result;
    } finally {
      await subscription.cancel();
    }
  }
}
