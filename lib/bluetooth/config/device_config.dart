import 'dart:core';

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
class DeviceConfig {
  /// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  static const List<String> devicePatterns = [
    r'Quantor\s+[A-Z]{3}\d{2}[A-Z]{2}', // Quantor AAA00AA
    r'Quantor\s+[A-Z]{3}\d{2}[A-Z]{2}', // Quantor BBB00BB
    r'Quantor\s+[A-Z]{3}\d{2}[A-Z]{2}', // Quantor CCC00CC
    r'^Quantor$', // –ü—Ä–æ—Å—Ç–æ "Quantor" (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º)
    r'Quantor.*', // –õ—é–±–æ–µ –∏–º—è, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å Quantor
    r'.*Quantor.*', // –õ—é–±–æ–µ –∏–º—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ Quantor
    r'^aclij$', // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ aclij
  ];

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
  static bool matchesPattern(String? deviceName) {
    if (deviceName == null || deviceName.isEmpty) {
      return false;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (deviceName == "Quantor AAA00AA") {
      print('‚úÖ [DeviceConfig] –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å "Quantor AAA00AA"');
      return true;
    }

    return devicePatterns.any((pattern) {
      try {
        final regex = RegExp(pattern, caseSensitive: false);
        final matches = regex.hasMatch(deviceName);
        if (matches) {
          print(
              '‚úÖ [DeviceConfig] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: $pattern');
        }
        return matches;
      } catch (e) {
        // –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        print('‚ö†Ô∏è [DeviceConfig] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "$pattern": $e');
        final simpleMatch = deviceName.toLowerCase().contains('quantor');
        if (simpleMatch) {
          print(
              '‚úÖ [DeviceConfig] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ');
        }
        return simpleMatch;
      }
    });
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
  static bool matchesSpecificPattern(String? deviceName, String pattern) {
    if (deviceName == null || deviceName.isEmpty) {
      return false;
    }

    try {
      final regex = RegExp(pattern, caseSensitive: false);
      final matches = regex.hasMatch(deviceName);
      return matches;
    } catch (e) {
      print('‚ùå [DeviceConfig] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "$pattern": $e');
      return false;
    }
  }

  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
  static Map<String, dynamic>? extractDeviceInfo(String? deviceName) {
    if (deviceName == null || deviceName.isEmpty) {
      return null;
    }

    for (final pattern in devicePatterns) {
      try {
        final regex = RegExp(pattern, caseSensitive: false);
        final match = regex.firstMatch(deviceName);

        if (match != null) {
          final info = {
            'fullName': deviceName,
            'pattern': pattern,
            'matchedGroups':
                match.groups([1, 2, 3]).where((g) => g != null).toList(),
          };
          print('‚úÖ [DeviceConfig] –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: $info');
          return info;
        }
      } catch (e) {
        print(
            '‚ö†Ô∏è [DeviceConfig] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "$pattern": $e');
      }
    }

    return null;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  static List<String> getPatterns() {
    return List.from(devicePatterns);
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
  static void addPattern(String pattern) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    try {
      RegExp(pattern);
      devicePatterns.add(pattern);
      print('‚úÖ [DeviceConfig] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: $pattern');
    } catch (e) {
      print('‚ùå [DeviceConfig] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: $pattern - $e');
      throw ArgumentError('Invalid regex pattern: $pattern');
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É
  static void removePattern(int index) {
    if (index >= 0 && index < devicePatterns.length) {
      final removed = devicePatterns.removeAt(index);
      print('‚úÖ [DeviceConfig] –£–¥–∞–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É $index: $removed');
    } else {
      print('‚ùå [DeviceConfig] –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: $index');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
  static void clearPatterns() {
    print('üßπ [DeviceConfig] –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
    devicePatterns.clear();
  }
}
