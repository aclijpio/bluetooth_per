import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';

import 'package:dartz/dartz.dart';
import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;
import 'package:flutter_blue_classic/flutter_blue_classic.dart';

import '../config/device_config.dart';
import '../entities/archive_info.dart';
import '../entities/bluetooth_device.dart';
import '../protocol/bluetooth_protocol.dart';
import '../services/archive_service.dart';
import '../transport/bluetooth_transport.dart';
import '../../core/error/failures.dart';

/// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bluetooth —Å–µ—Ä–≤–µ—Ä–æ–º
class BluetoothServerRepository {
  final classic.FlutterBlueClassic _flutterBlueClassic;
  final BluetoothTransport _transport;

  /// –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–ª–æ—Å—å
  /// –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
  String? _lastConnectedAddress;

  BluetoothServerRepository(this._flutterBlueClassic, this._transport);

  /// –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
  Future<Either<Failure, List<BluetoothDevice>>> scanForDevices() async {
    try {
      print(
          'üîç [BluetoothServerRepository] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

      final devices = <BluetoothDevice>[];

      // ------------------- Collect already bonded (paired) devices -------------------
      try {
        print(
            'üîç [BluetoothServerRepository] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞—Ä–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        final bonded = await _flutterBlueClassic.bondedDevices ??
            <classic.BluetoothDevice>[];

        for (final d in bonded) {
          if (d.name != null &&
              d.name != "null" &&
              DeviceConfig.matchesPattern(d.name)) {
            print(
                '‚úÖ [BluetoothServerRepository] –°–ø–∞—Ä–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${d.name}');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if (!devices.any((e) => e.address == d.address)) {
              devices.add(BluetoothDevice(address: d.address, name: d.name));
              print(
                  '‚ûï [BluetoothServerRepository] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ø–∞—Ä–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${d.name} (${d.address})');
            }
          }
        }

        print(
            '‚ÑπÔ∏è [BluetoothServerRepository] –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${bonded.length}');
      } catch (e) {
        print(
            '‚ö†Ô∏è [BluetoothServerRepository] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      _flutterBlueClassic.stopScan();
      print(
          'üîç [BluetoothServerRepository] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      final completer = Completer<List<BluetoothDevice>>();

      final startTime = DateTime.now();

      late StreamSubscription subscription;
      subscription = _flutterBlueClassic.scanResults.listen(
        (classicDevice) async {
          print(
              'üîç [BluetoothServerRepository] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${classicDevice.name} (${classicDevice.address})');

          // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∞–º
          if (classicDevice.name != null &&
              classicDevice.name != "null" &&
              DeviceConfig.matchesPattern(classicDevice.name)) {
            if (!devices.any((d) => d.address == classicDevice.address)) {
              devices.add(BluetoothDevice(
                  address: classicDevice.address, name: classicDevice.name));
              print(
                  '‚ûï [BluetoothServerRepository] –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${classicDevice.name} (${classicDevice.address})');
            }
          }

          // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø—Ä–æ—à–ª–æ ‚â•3 —Å —Å –Ω–∞—á–∞–ª–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω
          final elapsed = DateTime.now().difference(startTime).inSeconds;
          if (devices.isNotEmpty && elapsed >= 3) {
            print(
                '‚úÖ [BluetoothServerRepository] –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
            await _flutterBlueClassic.stopScan();
            await subscription.cancel();
            if (!completer.isCompleted) completer.complete(devices);
          }
        },
        onError: (error) {
          print(
              '‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: $error');
          if (!completer.isCompleted) completer.completeError(error);
        },
      );

      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      print('üîç [BluetoothServerRepository] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
      _flutterBlueClassic.startScan();
      print('üîç [BluetoothServerRepository] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');

      // safety-—Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç
      Timer(const Duration(seconds: 20), () async {
        print('‚è∞ [BluetoothServerRepository] –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (20 —Å–µ–∫—É–Ω–¥)');
        await _flutterBlueClassic.stopScan();
        await subscription.cancel();
        if (devices.isEmpty) {
          print(
              '‚ö†Ô∏è [BluetoothServerRepository] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
          print('   - –í–∫–ª—é—á–µ–Ω –ª–∏ Bluetooth –Ω–∞ –æ–±–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
          print('   - –ó–∞–ø—É—â–µ–Ω–æ –ª–∏ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
          print('   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º');
          print('   - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
        }
        completer.complete(devices);
      });

      final result = await completer.future;
      print('‚úÖ [BluetoothServerRepository] –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return Right(result);
    } catch (e) {
      print('‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      return Left(BluetoothFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e'));
    }
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, ArchiveInfo>> connectAndUpdateArchive(
      BluetoothDevice device) async {
    try {
      print(
          'üîó [BluetoothServerRepository] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${device.name} (${device.address})');

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
      await _transport.connect(device.address);
      _lastConnectedAddress = device.address;
      print(
          '‚úÖ [BluetoothServerRepository] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
      final updateCommand = BluetoothProtocol.updateArchiveCmd();
      print('üì§ [BluetoothServerRepository] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É UPDATE_ARCHIVE');
      _transport.sendCommand(updateCommand);
      print('‚úÖ [BluetoothServerRepository] –ö–æ–º–∞–Ω–¥–∞ UPDATE_ARCHIVE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞
      print(
          '‚è≥ [BluetoothServerRepository] –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞...');
      final archiveInfo = await _waitForArchiveReady();
      print(
          '‚úÖ [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞: ${archiveInfo.fileName}');

      return Right(archiveInfo);
    } catch (e) {
      print(
          '‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e'));
    }
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  Future<Either<Failure, String>> downloadArchive(
      ArchiveInfo archiveInfo) async {
    try {
      print(
          'üì• [BluetoothServerRepository] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: ${archiveInfo.fileName}');

      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Å–ª–µ ARCHIVE_READY,
      // –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π GET_ARCHIVE.
      if (!_transport.isConnected) {
        if (_lastConnectedAddress == null) {
          throw StateError(
              '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫ –∫–∞–∫–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }

        print(
            'üîÑ [BluetoothServerRepository] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${_lastConnectedAddress!}');
        await _transport.connect(_lastConnectedAddress!);
        print('‚úÖ [BluetoothServerRepository] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
      final getCommand = BluetoothProtocol.getArchiveCmd(archiveInfo.path);
      print(
          'üì§ [BluetoothServerRepository] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É GET_ARCHIVE –¥–ª—è —Ñ–∞–π–ª–∞: ${archiveInfo.path}');
      try {
        _transport.sendCommand(getCommand);
      } catch (e) {
        print('‚ö†Ô∏è [BluetoothServerRepository] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GET_ARCHIVE: $e');
        print(
            'üîÑ [BluetoothServerRepository] –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å');
        await _transport.disconnect();
        await _transport.connect(_lastConnectedAddress!);
        _transport.sendCommand(getCommand);
      }
      print('‚úÖ [BluetoothServerRepository] –ö–æ–º–∞–Ω–¥–∞ GET_ARCHIVE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');

      // –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
      print('‚è≥ [BluetoothServerRepository] –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞...');
      final archiveData = await _downloadArchiveData();
      print(
          '‚úÖ [BluetoothServerRepository] –î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã (${archiveData.length} –±–∞–π—Ç)');

      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
      print('üì¶ [BluetoothServerRepository] –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...');
      final extractedPath = await ArchiveService.extractArchive(
          archiveData, archiveInfo.fileName);
      print('‚úÖ [BluetoothServerRepository] –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: $extractedPath');

      return Right(extractedPath);
    } catch (e) {
      print('‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: $e');
      return Left(
          FileOperationFailure(message: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: $e'));
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<Either<Failure, bool>> disconnect() async {
    try {
      print('üîå [BluetoothServerRepository] –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
      await _transport.disconnect();
      _lastConnectedAddress = null;
      print('‚úÖ [BluetoothServerRepository] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return const Right(true);
    } catch (e) {
      print('‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: $e');
      return Left(ConnectionFailure(message: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: $e'));
    }
  }

  /// –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞
  Future<ArchiveInfo> _waitForArchiveReady() async {
    final completer = Completer<ArchiveInfo>();

    final subscription = _transport.bytes.listen(
      (data) {
        print(
            'üì® [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${data.length} –±–∞–π—Ç');
        final command = _decodeCommand(data);
        print(
            'üì® [BluetoothServerRepository] –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command');

        if (command == BluetoothProtocol.CMD_UPDATING_ARCHIVE) {
          print(
              '‚è≥ [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ UPDATING_ARCHIVE - —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä—Ö–∏–≤');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å ARCHIVE_READY
        } else if (command.startsWith(BluetoothProtocol.CMD_ARCHIVE_READY)) {
          print('‚úÖ [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ARCHIVE_READY');
          final path = BluetoothProtocol.extractArchiveReadyPath(command);
          if (path != null) {
            print('üìÅ [BluetoothServerRepository] –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É: $path');
            completer.complete(ArchiveInfo.fromPath(path));
          } else {
            print(
                '‚ùå [BluetoothServerRepository] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã ARCHIVE_READY');
            completer.completeError(
                Exception('Invalid ARCHIVE_READY command format'));
          }
        } else if (command.startsWith(BluetoothProtocol.CMD_ERROR)) {
          print('‚ùå [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ERROR');
          final error = BluetoothProtocol.extractErrorMessage(command);
          print('‚ùå [BluetoothServerRepository] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: $error');
          completer.completeError(Exception(error ?? 'Unknown error'));
        } else {
          print('‚ö†Ô∏è [BluetoothServerRepository] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command');
        }
      },
      onError: (error) {
        print(
            '‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $error');
        completer.completeError(error);
      },
    );

    // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
    Timer(const Duration(seconds: 30), () {
      if (!completer.isCompleted) {
        print(
            '‚è∞ [BluetoothServerRepository] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞ (30 —Å–µ–∫—É–Ω–¥)');
        completer.completeError(Exception('Timeout waiting for archive ready'));
      }
    });

    try {
      final result = await completer.future;
      subscription.cancel();
      return result;
    } catch (e) {
      subscription.cancel();
      rethrow;
    }
  }

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞
  Future<Uint8List> _downloadArchiveData() async {
    final completer = Completer<Uint8List>();
    final buffer = <int>[];

    print('üì• [BluetoothServerRepository] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞...');

    late StreamSubscription subscription;
    Timer? timeoutTimer;

    void completeIfNot() {
      if (!completer.isCompleted) {
        completer.complete(Uint8List.fromList(buffer));
      }
    }

    const idle = Duration(seconds: 2);
    Timer? idleTimer;

    void resetIdle() {
      idleTimer?.cancel();
      idleTimer = Timer(idle, () {
        print('üïë [BluetoothServerRepository] idle timeout ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏—ë–º');
        completeIfNot();
      });
    }

    subscription = _transport.bytes.listen(
      (data) {
        print(
            'üì® [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length} –±–∞–π—Ç');
        buffer.addAll(data);
        print(
            'üìä [BluetoothServerRepository] –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${buffer.length} –±–∞–π—Ç');
        resetIdle();
      },
      onError: (error) {
        print(
            '‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞: $error');
        if (!completer.isCompleted) {
          completer.completeError(error);
        }
      },
      onDone: () {
        print(
            '‚úÖ [BluetoothServerRepository] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        completeIfNot();
      },
    );

    // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    timeoutTimer = Timer(const Duration(seconds: 60), () {
      if (!completer.isCompleted) {
        print(
            '‚è∞ [BluetoothServerRepository] –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ (60 —Å–µ–∫—É–Ω–¥)');
        print(
            'üìä [BluetoothServerRepository] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${buffer.length} –±–∞–π—Ç');
        completeIfNot();
      }
    });

    try {
      final result = await completer.future;
      await subscription.cancel();
      timeoutTimer?.cancel();
      return result;
    } catch (e) {
      await subscription.cancel();
      timeoutTimer?.cancel();
      rethrow;
    }
  }

  /// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–∞–π—Ç–æ–≤
  String _decodeCommand(List<int> data) {
    try {
      if (data.length < 2) {
        print(
            '‚ùå [BluetoothServerRepository] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${data.length} –±–∞–π—Ç');
        return '';
      }

      final length = (data[0] << 8) | data[1];
      print('üìè [BluetoothServerRepository] –î–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã: $length –±–∞–π—Ç');

      if (data.length < 2 + length) {
        print(
            '‚ùå [BluetoothServerRepository] –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å ${2 + length}, –ø–æ–ª—É—á–µ–Ω–æ ${data.length}');
        return '';
      }

      final commandBytes = data.sublist(2, 2 + length);
      final command = utf8.decode(commandBytes);
      print('üìù [BluetoothServerRepository] –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command');
      return command;
    } catch (e) {
      print('‚ùå [BluetoothServerRepository] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: $e');
      return '';
    }
  }
}
