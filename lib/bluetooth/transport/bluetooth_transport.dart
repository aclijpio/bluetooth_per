import 'dart:async';
import 'dart:typed_data';

import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;

/// –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ [FlutterBlueClassic], –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
/// —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π API –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ RFCOMM.
class BluetoothTransport {
  BluetoothTransport(this._bluetooth);

  final classic.FlutterBlueClassic _bluetooth;

  classic.BluetoothConnection? _connection;
  StreamSubscription? _inputSub;
  final _bytesController = StreamController<List<int>>.broadcast();

  /// –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –±–∞–π—Ç–æ–≤.
  Stream<List<int>> get bytes => _bytesController.stream;

  bool get isConnected => _connection?.isConnected ?? false;

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç RFCOMM-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º [mac]
  Future<void> connect(String mac) async {
    try {
      print('üîó [BluetoothTransport] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $mac');

      if (_connection != null && _connection!.isConnected) {
        print('‚ö†Ô∏è [BluetoothTransport] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $mac');
        return;
      }

      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞.
      await _inputSub?.cancel();
      _inputSub = null;

      print('üîó [BluetoothTransport] –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
      _connection = await _bluetooth.connect(mac);

      if (!(_connection?.isConnected ?? false)) {
        print(
            '‚ùå [BluetoothTransport] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $mac');
        throw Exception('Failed to connect to $mac');
      }

      print(
          '‚úÖ [BluetoothTransport] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: $mac');

      // –ö–∞–∂–¥—É—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ—Ä—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞—Ä—É–∂—É.
      _inputSub = _connection!.input?.listen(
        (data) {
          print('üì® [BluetoothTransport] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${data.length} –±–∞–π—Ç');
          _bytesController.add(data);
        },
        onError: (error) {
          print('‚ùå [BluetoothTransport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $error');
          _bytesController.addError(error);
        },
        onDone: () {
          print('üîå [BluetoothTransport] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
          // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º _bytesController –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
          // _bytesController.close();
        },
        cancelOnError: true,
      );

      print('‚úÖ [BluetoothTransport] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (e) {
      print('‚ùå [BluetoothTransport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: $e');
      rethrow;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–æ–∫–µ—Ç
  void sendCommand(Uint8List data) {
    try {
      if (!isConnected) {
        print(
            '‚ùå [BluetoothTransport] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        throw StateError('Not connected');
      }

      print('üì§ [BluetoothTransport] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${data.length} –±–∞–π—Ç');
      _connection!.output.add(data);
      print('‚úÖ [BluetoothTransport] –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå [BluetoothTransport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  Future<void> disconnect() async {
    try {
      print('üîå [BluetoothTransport] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ...');

      await _inputSub?.cancel();
      _inputSub = null;
      print('‚úÖ [BluetoothTransport] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–∞');

      await _connection?.close();
      _connection = null;
      print('‚úÖ [BluetoothTransport] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

      print('‚úÖ [BluetoothTransport] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå [BluetoothTransport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  Future<void> dispose() async {
    try {
      print('üóëÔ∏è [BluetoothTransport] –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç...');
      await disconnect();
      await _bytesController.close();
      print('‚úÖ [BluetoothTransport] –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    } catch (e) {
      print('‚ùå [BluetoothTransport] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: $e');
      rethrow;
    }
  }
}
