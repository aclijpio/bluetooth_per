import 'package:bluetooth_per/bluetooth/bluetooth.dart';
import 'package:flutter_blue_classic/flutter_blue_classic.dart' as classic;

/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Bluetooth —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
class BluetoothTest {
  static Future<void> testBluetooth() async {
    print('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bluetooth...');

    try {
      // –°–æ–∑–¥–∞–µ–º BluetoothManager
      final bluetoothManager = BluetoothManager(
        flutterBlueClassic: classic.FlutterBlueClassic(),
        mainData: MainData(),
      );

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      print('üîç –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      final scanResult = await bluetoothManager.scanForDevices();

      scanResult.fold(
        (failure) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${failure.message}');
        },
        (devices) {
          print('‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}');
          for (final device in devices) {
            print('   - ${device.name} (${device.address})');
          }

          // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          if (devices.isNotEmpty) {
            _testConnection(bluetoothManager, devices.first);
          }
        },
      );
    } catch (e) {
      print('üí• –û—à–∏–±–∫–∞: $e');
    }
  }

  static Future<void> _testConnection(
      BluetoothManager bluetoothManager, BluetoothDevice device) async {
    print('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${device.name}...');

    try {
      final connectResult =
          await bluetoothManager.connectAndUpdateArchive(device);

      connectResult.fold(
        (failure) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${failure.message}');
        },
        (archiveInfo) {
          print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
          print('üìÅ –ê—Ä—Ö–∏–≤: ${archiveInfo.fileName}');

          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
          _testDownload(bluetoothManager, archiveInfo);
        },
      );
    } catch (e) {
      print('üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  static Future<void> _testDownload(
      BluetoothManager bluetoothManager, ArchiveInfo archiveInfo) async {
    print('üì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...');

    try {
      final downloadResult =
          await bluetoothManager.downloadArchive(archiveInfo);

      downloadResult.fold(
        (failure) {
          print('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${failure.message}');
        },
        (path) {
          print('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
          print('üìÇ –ü—É—Ç—å: $path');
        },
      );
    } catch (e) {
      print('üí• –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: $e');
    }
  }
}
